-- Type checking of intersection types
[case testIntersectionAttributeAccessA]
from typing import Intersection

class A: a = "a"
class B: b = "b"

test: Intersection[A,B] = None
test.a
test.b
test.c # E: "Intersection[A, B]" has no attribute "c"
[builtins fixtures/isinstance.pyi]

[case testIntersectionFunctionAccess]
from typing import Intersection

class A:
    def a(self):
        pass

class B:
    def b(self):
        pass

test: Intersection[A,B] = None
test.a
test.b
test.c # E: "Intersection[A, B]" has no attribute "c"
[builtins fixtures/isinstance.pyi]

[case testIntersectionFunctionAccessWithTypeVar]
from typing import TypeVar, Union, Intersection
S = TypeVar("S")

class Loggable:
    def log(self):
        pass

def test3(x: Intersection[S, Loggable]) -> int:
    return x.log()
[builtins fixtures/isinstance.pyi]

[case testEqualityOfIntersectionAndSubclassing]
from typing import Intersection
class Loggable: pass
class Serializable: pass
class LoggableAndSerializable(Loggable, Serializable): pass

entity: Intersection[Loggable, Serializable] = LoggableAndSerializable()

entity2: LoggableAndSerializable = entity
[builtins fixtures/isinstance.pyi]


[case testIntersectionOfProtocols]
from typing import Protocol, Union, Intersection
class Drawable(Protocol):
    def draw(self) -> None:
        ...

class Movable(Protocol):
    def move(self, x: float, y: float) -> None:
        ...

def draw_and_move(obj: Drawable & Movable) -> bool:
    obj.move(10, 20)
    obj.draw()
    return True
[builtins fixtures/isinstance.pyi]

[case testCallOnIntersection]
from typing import Intersection

class A:
    def __call__(self):
        print("hi")

class B:
    def b(self):
        pass

test: Intersection[A,B] = None
test() # E: "B" not callable

[builtins fixtures/isinstance.pyi]

[case testIntersection0]
from typing import TypeVar, Union, Intersection
S = TypeVar("S")

class Loggable:
    def log(self):
        pass

def test3(x: Intersection[S, Loggable]) -> int:
    return x.log()
[builtins fixtures/isinstance.pyi]


[case testIntersection1]
from typing import TypeVar, Callable, Union, Intersection
S = TypeVar("S")
T = TypeVar("T")

def test3(x: Intersection[S, T]) -> S:
    return x
[builtins fixtures/isinstance.pyi]

[case testIntersection2]
from typing import TypeVar, Callable, Union, Intersection
S = TypeVar("S")
T = TypeVar("T")
R = TypeVar("R")

def test3(x: Intersection[S, T]) -> R:
    return x
[builtins fixtures/isinstance.pyi]
[out]
main:6: error: A function returning TypeVar should receive at least one argument containing the same TypeVar
main:7: error: Incompatible return value type (got "Intersection[S, T]", expected "R")

[case testIntersectionOfCallables1]
from typing import TypeVar, Callable, Union, Intersection

def f(x: Intersection[Callable[[int], bool], Callable[[str], bool]], y: Union[int, str]) -> bool:
    return x(y)

def only_int(arg : int) -> bool:
    return True

f(only_int, "3") # E: Argument 1 to "f" has incompatible type "Callable[[int], bool]"; expected "Intersection[Callable[[int], bool], Callable[[str], bool]]"
[builtins fixtures/isinstance.pyi]

[case testIntersectionOfCallables2]
from typing import TypeVar, Callable, Union, Intersection

def f(x: Intersection[Callable[[int], bool], Callable[[str], float]], y: Union[int, str]) -> bool:
    return x(y)
[builtins fixtures/isinstance.pyi]
[out]
main:4: error: Argument 1 has incompatible type "Union[int, str]"; expected "int"
main:4: error: Argument 1 has incompatible type "Union[int, str]"; expected "str"

[case testIntersectionRealExampleBug]
from typing import TypeVar, Callable, Union, Intersection

def test3(x: Intersection[Callable[[int], bool], Callable[[str], bool]], y: Union[int, str]) -> bool:
    return x(y)

def f(arg: Union[int, str]) -> bool:
    return True
ret = test3(f, 1)
[builtins fixtures/isinstance.pyi]

[case testIntersectionRealExample]
from typing import TypeVar, Callable, Union, Intersection

def test3(x: Intersection[Callable[[int], bool], Callable[[str], bool]], y: Union[int, str]) -> bool:
    return x(y)

def f(x: Union[int, str]) -> bool:
    return True

result: bool = test3(f, "3")
[builtins fixtures/isinstance.pyi]

[case testIntersection3]
from typing import TypeVar, Callable, Union, Intersection
S = TypeVar("S")
T = TypeVar("T")
R = TypeVar("R")

def test3(x: Intersection[Callable[[S], T], Callable[[R], T]], y: Union[S, R]) -> T:
    return x(y)
[builtins fixtures/isinstance.pyi]

[case testIntersection4]
from typing import TypeVar, Callable, Union, Intersection
S = TypeVar("S")
T = TypeVar("T")
R = TypeVar("R")
Q = TypeVar("Q")

def test3(x: Intersection[Callable[[S], T], Callable[[R], T]], y: Union[S, R]) -> Q:
    return x(y)
[builtins fixtures/isinstance.pyi]
[out]
main:7: error: A function returning TypeVar should receive at least one argument containing the same TypeVar
main:8: error: Incompatible return value type (got "T", expected "Q")

[case testIntersection5]
from typing import TypeVar, Callable, Union, Intersection
S = TypeVar("S")
T = TypeVar("T")
R = TypeVar("R")

def test3(x: Intersection[Callable[[S], T], Callable[[R], T]], y: Union[S, R]) -> T:
    return x(y)
[builtins fixtures/isinstance.pyi]

[case testIntersection6]
from typing import TypeVar, Callable, Union, Intersection
S = TypeVar("S")
T = TypeVar("T")
R = TypeVar("R")

def test3(x: Intersection[Callable[[S], R], Callable[[R], T]], y: Union[S, R]) -> Union[T, R]:
    return x(y)
[builtins fixtures/isinstance.pyi]
[out]
main:7: error: Argument 1 has incompatible type "Union[S, R]"; expected "S"
main:7: error: Argument 1 has incompatible type "Union[S, R]"; expected "R"

[case testIntersection9]
# flags: --python-version 3.10
from typing import TypeVar, Callable, Union, Intersection
S = TypeVar("S")
T = TypeVar("T")
R = TypeVar("R")
M = TypeVar("M")

def g(
    x: Callable[[int], Callable[[int], bool]],
) -> bool:
    return x(3)("string")

[builtins fixtures/isinstance.pyi]
[out]
main:11: error: Argument 1 has incompatible type "str"; expected "int"

[case testIntersection9B]
# flags: --python-version 3.10
from typing import TypeVar, Callable, Union, Intersection
def g(
    x: Callable[[int], Callable[[int], bool]] & Callable[[str], Callable[[str], bool]],
) -> bool:
    return x(3)(2)

[builtins fixtures/isinstance.pyi]

[case testComplexIntersectionType]
# flags: --python-version 3.10
from typing import Callable, Union, Intersection

x: Callable[[int], Callable[[int], bool]] & Callable[[str], Callable[[str], bool]]
x(3)(2)
x("3")("2")
x("3")(2) # E: Argument 1 has incompatible type "int"; expected "str"
x(3)("2") # E: Argument 1 has incompatible type "str"; expected "int"
[builtins fixtures/isinstance.pyi]

[case testIntersection10A]
# flags: --python-version 3.10
from typing import TypeVar, Callable, Union, Intersection
S = TypeVar("S")
T = TypeVar("T")
R = TypeVar("R")
M = TypeVar("M")

def g(
    x: Callable[[S], Callable[[S], T]] & Callable[[R], Callable[[S], T]],
    y: Callable[[M], S],
    z: M,
) -> T:
    return x((y(z)))(y(z))
[builtins fixtures/isinstance.pyi]

[case testIntersection10X]
# flags: --python-version 3.10
from typing import TypeVar, Callable, Union, Intersection
S = TypeVar("S")
T = TypeVar("T")
R = TypeVar("R")
M = TypeVar("M")

def g(
    x: Callable[[S], Callable[[S], T]] & Callable[[R], Callable[[R], T]],
    y: S,
) -> T:
    return x(y)(y)

def h(
    x: Callable[[S], Callable[[S], T]] & Callable[[S], Callable[[R], T]],
    y: Union[S, R],
) -> T:
    return x(y)(y) # E: Argument 1 has incompatible type "Union[S, R]"; expected "S"

def f(
    x: Callable[[S], Callable[[S], T]] & Callable[[R], Callable[[S], T]],
    y: Union[S, R],
) -> T:
    return x(y)(y) # E: Argument 1 has incompatible type "Union[S, R]"; expected "S"
[builtins fixtures/isinstance.pyi]

[case testIntersection10B]
# flags: --python-version 3.10
from typing import TypeVar, Callable, Union, Intersection
S = TypeVar("S")
T = TypeVar("T")
R = TypeVar("R")
M = TypeVar("M")



def g(
    x: Callable[[S], Callable[[S], T]] & Callable[[R], Callable[[R], T]],
    y: Callable[[M], Union[S, R]],
    z1: M,
    z2: M
) -> T:
    return x((y(z1)))(y(z2))
[builtins fixtures/isinstance.pyi]
[out]
main:16: error: Argument 1 has incompatible type "Union[S, R]"; expected "S"
main:16: error: Argument 1 has incompatible type "Union[S, R]"; expected "R"

[case testIntersection10D]
# flags: --python-version 3.10
from typing import TypeVar, Callable, Union, Intersection
S = TypeVar("S")
T = TypeVar("T")
R = TypeVar("R")
M = TypeVar("M")

def g(
    x: Callable[[S], Callable[[S], T]] & Callable[[R], Callable[[S], T]],
    y: Union[S, R],
) -> T:
    return x(y)(y) # E: Argument 1 has incompatible type "Union[S, R]"; expected "S"
[builtins fixtures/isinstance.pyi]

[case testIntersection11]
# flags: --python-version 3.10
from typing import TypeVar, Callable, Union, Intersection
class S:
    pass
class T1:
    pass
class T2(T1):
    pass
class R:
    pass
class M:
    pass
def g(
    x: Callable[[S], Callable[[S], T2]] & Callable[[R], Callable[[R], T1]],
    y: Callable[[M], S | R],
    z: M,
) -> T1:
    return x((y(z)))(y(z))
[builtins fixtures/isinstance.pyi]
[out]
main:18: error: Argument 1 has incompatible type "Union[S, R]"; expected "S"
main:18: error: Argument 1 has incompatible type "Union[S, R]"; expected "R"

[case testIntersectionOfCallablesEqualRet]
# flags: --python-version 3.10
from typing import TypeVar, Callable, Union, Intersection
S = TypeVar("S")
T = TypeVar("T")
R = TypeVar("R")
M = TypeVar("M")

def test_function(
                f: Callable[[S], T] & Callable[[R], T],
                x: Union[S, R],
                y: S,
                z: R):
    f(x)
    f(y)
    f(z)
[builtins fixtures/isinstance.pyi]

[case testIntersectionOfNestedCallables]
# flags: --python-version 3.10
from typing import TypeVar, Callable, Union, Intersection
S = TypeVar("S")
T = TypeVar("T")
R = TypeVar("R")
M = TypeVar("M")

# y: S
# z: R
# u: Union[S, R]

def test_function(
                f: Callable[[S], Callable[[S], T]] & Callable[[R], Callable[[R], T]],
                x: Intersection[S, R],
                y: S,
                z: R,
                a: M,
                u: Union[S, R]):
    f(x)(x)
    f(y)(y)
    f(z)(z)
    f(y)(z) # E: Argument 1 has incompatible type "R"; expected "S"
    f(z)(y) # E: Argument 1 has incompatible type "S"; expected "R"
    f(u) # E: Argument 1 has incompatible type "Union[S, R]"; expected "S" # E: Argument 1 has incompatible type "Union[S, R]"; expected "R"
[builtins fixtures/isinstance.pyi]


